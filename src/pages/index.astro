---
const championNames = [
  "Aatrox",
  "Ahri",
  "Akali",
  "Akshan",
  "Alistar",
  "Ambessa",
  "Amumu",
  "Anivia",
  "Annie",
  "Aphelios",
  "Ashe",
  "Aurelion Sol",
  "Aurora",
  "Azir",
  "Bard",
  "Bel'Veth",
  "Blitzcrank",
  "Brand",
  "Braum",
  "Briar",
  "Caitlyn",
  "Camille",
  "Cassiopeia",
  "Cho'Gath",
  "Corki",
  "Darius",
  "Diana",
  "Draven",
  "Dr. Mundo",
  "Ekko",
  "Elise",
  "Evelynn",
  "Ezreal",
  "Fiddlesticks",
  "Fiora",
  "Fizz",
  "Galio",
  "Gangplank",
  "Garen",
  "Gnar",
  "Gragas",
  "Graves",
  "Gwen",
  "Hecarim",
  "Heimerdinger",
  "Hwei",
  "Illaoi",
  "Irelia",
  "Ivern",
  "Janna",
  "Jarvan IV",
  "Jax",
  "Jayce",
  "Jhin",
  "Jinx",
  "Kai'Sa",
  "Kalista",
  "Karma",
  "Karthus",
  "Kassadin",
  "Katarina",
  "Kayle",
  "Kayn",
  "Kennen",
  "Kha'Zix",
  "Kindred",
  "Kled",
  "Kog'Maw",
  "K'Sante",
  "LeBlanc",
  "Lee Sin",
  "Leona",
  "Lillia",
  "Lissandra",
  "Lucian",
  "Lulu",
  "Lux",
  "Malphite",
  "Malzahar",
  "Maokai",
  "Master Yi",
  "Mel",
  "Milio",
  "Miss Fortune",
  "Mordekaiser",
  "Morgana",
  "Naafiri",
  "Nami",
  "Nasus",
  "Nautilus",
  "Neeko",
  "Nidalee",
  "Nilah",
  "Nocturne",
  "Nunu & Willump",
  "Olaf",
  "Orianna",
  "Ornn",
  "Pantheon",
  "Poppy",
  "Pyke",
  "Qiyana",
  "Quinn",
  "Rakan",
  "Rammus",
  "Rek'Sai",
  "Rell",
  "Renata Glasc",
  "Renekton",
  "Rengar",
  "Riven",
  "Rumble",
  "Ryze",
  "Samira",
  "Sejuani",
  "Senna",
  "Seraphine",
  "Sett",
  "Shaco",
  "Shen",
  "Shyvana",
  "Singed",
  "Sion",
  "Sivir",
  "Skarner",
  "Smolder",
  "Sona",
  "Soraka",
  "Swain",
  "Sylas",
  "Syndra",
  "Tahm Kench",
  "Taliyah",
  "Talon",
  "Taric",
  "Teemo",
  "Thresh",
  "Tristana",
  "Trundle",
  "Tryndamere",
  "Twisted Fate",
  "Twitch",
  "Udyr",
  "Urgot",
  "Varus",
  "Vayne",
  "Veigar",
  "Vel'Koz",
  "Vex",
  "Vi",
  "Viego",
  "Viktor",
  "Vladimir",
  "Volibear",
  "Warwick",
  "Wukong",
  "Xayah",
  "Xerath",
  "Xin Zhao",
  "Yasuo",
  "Yone",
  "Yorick",
  "Yunara",
  "Yuumi",
  "Zac",
  "Zed",
  "Zeri",
  "Ziggs",
  "Zilean",
  "Zoe",
  "Zyra",
];

const formatChampionName = (name: string) => {
  // Handle special cases for champion names that don't match the file name convention
  if (name === "Wukong") return "MonkeyKing";
  if (name === "Nunu & Willump") return "Nunu";
  if (name === "Cho'Gath") return "Chogath";
  if (name === "LeBlanc") return "Leblanc";
  if (name === "Renata Glasc") return "Renata";

  let formatted = name.replace(/[^a-zA-Z0-9]/g, "");

  // Handle inconsistent casing from the file names
  if (formatted === "BelVeth") return "Belveth";
  if (formatted === "KaiSa") return "Kaisa";
  if (formatted === "KhaZix") return "Khazix";
  if (formatted === "VelKoz") return "Velkoz";
  if (formatted === "DrMundo") return "DrMundo";

  return formatted;
};
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>League Champion Tracker</title>
    <style>
      body {
        min-width: 360px;

        font-family: sans-serif;
        background-color: #121212;
        color: #fff;
        margin: 0 auto;

        max-width: 80rem; /* Equivalent to Tailwind's max-w-7xl */
        display: flex;
        flex-direction: column;
        gap: 2rem;
        padding: 1rem; /* Keep overall padding for the body */
      }
      .champion-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
        gap: 1rem;
      }
      .champion-card {
        cursor: pointer;
        border: 2px solid #333;
        border-radius: 5px;
        overflow: hidden;
        text-align: center;
        transition: transform 0.2s;
      }
      .champion-card:hover {
        transform: scale(1.05);
      }
      .champion-card.active {
        background-color: #28a745;
        border-color: #28a745;
      }
      .champion-card img {
        width: 100%;
        height: auto;
      }
      .champion-card p {
        margin: 0.5rem 0;
      }
      h1 {
        text-align: center;
      }
      .url-container {
        display: flex;
        justify-content: center;
        position: relative;
      }
      #share-url {
        width: 100%;
        max-width: 800px; /* Adjust as needed */
        padding: 0.5rem;
        background-color: #333;
        color: #fff;
        border: 1px solid #555;
        border-radius: 5px;
        box-sizing: border-box;
      }
      .share-url-button {
        position: relative; /* new */
        display: flex;
        align-items: center;
        justify-content: flex-start; /* changed from space-between */
        max-width: 800px;
        width: 100%;
        background-color: #333;
        color: #fff;
        border: 1px solid #555;
        border-radius: 5px;
        padding: 0.5rem 2.5rem 0.5rem 1rem; /* right padding for icon */
        cursor: pointer;
        font-family: inherit;
        font-size: 1rem;
        text-align: left;
        box-sizing: border-box;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
      }

      .copy-icon {
        position: absolute; /* new */
        right: -1px; /* adjust as needed */
        width: 16px;
        height: 16px;
        padding: 8px;
        padding-right: 16px;
        flex-shrink: 0;
        pointer-events: none; /* so clicks don't block the button */
        background-color: #333;
      }

      .tooltip {
        position: absolute;
        top: 100%; /* place below the button */
        left: 50%;
        transform: translateX(-50%);
        margin-top: 0.5rem; /* space below the button */
        background-color: #28a745;
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: 4px;
        font-size: 0.85rem;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.2s ease;
        white-space: nowrap;
        z-index: 10;
      }

      .tooltip.show {
        opacity: 1;
      }

      .share-url-button:hover {
        border-color: #888;
      }

      .share-url-button:active {
        background-color: #444;
      }

      #clear-all-button {
        height: 100%; /* Match height with input */

        padding: 0.5rem 1rem;
        font-size: 1rem;

        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
        border-radius: 5px;
        cursor: pointer;
        transition:
          background-color 0.2s,
          color 0.2s,
          border-color 0.2s;
        margin-left: 8px;
        box-sizing: border-box;
      }

      #clear-all-button:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
      }
      .search-controls {
        display: flex;
        align-items: center; /* Align items vertically */
      }
      #search-bar {
        border-radius: 5px;
        font-size: 16px;
      }
      .controls-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap; /* Allow items to wrap on smaller screens */
        gap: 1rem; /* Add some space between items when they wrap */
      }
      #champion-count {
        font-size: 1.5em;
        font-weight: bold;
        padding-left: 4px;
      }
      #search-bar {
        padding: 0.5rem;
        background-color: #333;
        color: #fff;
        border: 1px solid #555;
        width: 200px;
      }
      #custom-confirm-dialog {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
      }
      .dialog-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
      }
      .dialog-content {
        background-color: #222;
        padding: 2rem;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        z-index: 1001;
        text-align: center;
      }
      .dialog-content p {
        margin-bottom: 1.5rem;
        font-size: 1.1em;
      }
      .dialog-buttons button {
        padding: 0.75rem 1.5rem;
        margin: 0 0.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.2s;
      }
      #confirm-yes {
        background-color: #dc3545;
        color: #fff;
      }
      #confirm-yes:hover {
        background-color: #c82333;
      }
      #confirm-no {
        background-color: #6c757d;
        color: #fff;
      }
      #confirm-no:hover {
        background-color: #5a6268;
      }
      .hidden {
        display: none !important;
      }
      .main-content-area {
        display: flex;
        flex-direction: column;
        gap: 1rem;
      }
      .scroll-to-top {
        position: fixed;
        bottom: 3rem;
        right: 2rem;
        width: 48px;
        height: 48px;
        padding: 0px;

        background-color: #121212; /* Change this to your preferred color */
        border-radius: 50%;

        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
        cursor: pointer;
        z-index: 1000;

        transition:
          opacity 0.3s ease,
          transform 0.3s ease;
      }

      .scroll-to-top:hover {
        opacity: 1;
        transform: scale(1.1);
      }

      .scroll-to-top img {
        width: 36px;
        height: 36px;
        display: block;
        filter: invert(1);
      }

      .scroll-to-top.hidden {
        display: none;
      }

      @media (max-width: 768px) {
        .controls-container {
          flex-direction: column;
          align-items: stretch;
          position: sticky;
          top: 0;
          z-index: 100;
          background-color: #121212;
          padding: 1rem 0;
        }

        .search-controls {
          order: -1; /* move above counter */
        }

        #champion-count {
          text-align: left;
          width: 100%;
        }

        #search-bar {
          flex-grow: 1;
          width: auto;
        }

        #clear-all-button {
          margin-left: 8px;
          flex-shrink: 0;
        }
      }
    </style>
  </head>
  <body>
    <h1>League Arena Tracker</h1>

    <div class="url-container" style="position: relative; gap: 0.5rem;">
      <button
        id="share-url-button"
        class="share-url-button"
        style="height: 37px;"
      >
        <span id="share-url-text">https://example.com</span>
        <img src="copy.svg" alt="Copy" class="copy-icon" />
      </button>
      <button id="clear-all-button">Clear All</button>
      <div id="tooltip" class="tooltip">Copied!</div>
    </div>

    <div class="main-content-area">
      <div class="controls-container">
        <div id="champion-count">0 / 0 Champions</div>

        <div class="search-controls">
          <div class="search-bar-wrapper">
            <input
              type="text"
              id="search-bar"
              placeholder="Search champions..."
            />
            <span id="clear-search" class="clear-search hidden">×</span>
          </div>
        </div>
      </div>

      <!-- ✅ Filter Tabs -->
      <div class="filter-tabs">
        <button class="filter-tab active" data-filter="all">All</button>
        <button class="filter-tab" data-filter="selected">Selected</button>
        <button class="filter-tab" data-filter="unselected">Unselected</button>
      </div>

      <div class="champion-grid">
        {
          championNames.map((name) => (
            <div class="champion-card" data-champion={formatChampionName(name)}>
              <img
                src={`/champions/${formatChampionName(name)}.png`}
                alt={name}
              />
              <p>{name}</p>
            </div>
          ))
        }
      </div>
    </div>

    <div id="custom-confirm-dialog" class="hidden">
      <div class="dialog-overlay"></div>
      <div class="dialog-content">
        <p>Are you sure you want to clear all selected champions?</p>
        <div class="dialog-buttons">
          <button id="confirm-yes">Yes</button>
          <button id="confirm-no">No</button>
        </div>
      </div>
    </div>

    <button
      id="scroll-to-top"
      class="scroll-to-top hidden"
      aria-label="Scroll to top"
    >
      <img src="chevron-up.svg" alt="Scroll to top" />
    </button>

    <script type="module">
      document.addEventListener("DOMContentLoaded", () => {
        const championCards = document.querySelectorAll(".champion-card");
        const shareUrlButton = document.getElementById("share-url-button");
        const shareUrlText = document.getElementById("share-url-text");
        const championCountDisplay = document.getElementById("champion-count");
        const searchBar = document.getElementById("search-bar");
        const clearSearch = document.getElementById("clear-search");
        const clearAllButton = document.getElementById("clear-all-button");
        const customConfirmDialog = document.getElementById(
          "custom-confirm-dialog"
        );
        const confirmYesButton = document.getElementById("confirm-yes");
        const confirmNoButton = document.getElementById("confirm-no");
        const scrollButton = document.getElementById("scroll-to-top");
        const filterTabs = document.querySelectorAll(".filter-tab");

        // Basic null check
        if (
          !shareUrlButton ||
          !shareUrlText ||
          !championCountDisplay ||
          !searchBar ||
          !clearSearch ||
          !clearAllButton ||
          !customConfirmDialog ||
          !confirmYesButton ||
          !confirmNoButton ||
          !scrollButton
        ) {
          console.error("One or more required elements are missing.");
          return;
        }

        const updateUrl = () => {
          let bitmask = 0n;
          let activeCount = 0;

          championCards.forEach((card, index) => {
            if (card.classList.contains("active")) {
              bitmask |= 1n << BigInt(index);
              activeCount++;
            }
          });

          championCountDisplay.textContent = `${activeCount} / ${championCards.length} Champions`;

          const url = new URL(window.location.href);
          url.searchParams.set("state", bitmask.toString(16));
          url.searchParams.delete("champions");
          shareUrlText.textContent = url.toString();
          window.history.replaceState({}, "", url.toString());
        };

        const loadFromUrl = () => {
          const stateHex = new URLSearchParams(window.location.search).get(
            "state"
          );
          if (stateHex) {
            try {
              const bitmask = BigInt("0x" + stateHex);
              championCards.forEach((card, index) => {
                if ((bitmask & (1n << BigInt(index))) !== 0n) {
                  card.classList.add("active");
                }
              });
            } catch (e) {
              console.error("Invalid state:", e);
            }
          }
          updateUrl();
        };

        championCards.forEach((card) => {
          card.addEventListener("click", () => {
            card.classList.toggle("active");
            updateUrl();
          });
        });

        let activeFilter = "all"; // default

        const applyFilters = () => {
          const term = searchBar.value.toLowerCase();

          championCards.forEach((card) => {
            const name = card.dataset.champion?.toLowerCase() || "";
            const label =
              card.querySelector("p")?.textContent?.toLowerCase() || "";
            const matchesSearch = name.includes(term) || label.includes(term);
            const isSelected = card.classList.contains("active");

            let matchesFilter = false;
            if (activeFilter === "all") {
              matchesFilter = true;
            } else if (activeFilter === "selected") {
              matchesFilter = isSelected;
            } else if (activeFilter === "unselected") {
              matchesFilter = !isSelected;
            }

            card.style.display = matchesSearch && matchesFilter ? "" : "none";
          });

          clearSearch.classList.toggle("hidden", term === "");
        };

        // Handle filter tab clicks
        filterTabs.forEach((tab) => {
          tab.addEventListener("click", () => {
            filterTabs.forEach((t) => t.classList.remove("active"));
            tab.classList.add("active");

            activeFilter = tab.dataset.filter || "all";
            applyFilters();
          });
        });

        // Handle search input
        searchBar.addEventListener("input", applyFilters);
        clearSearch.addEventListener("click", () => {
          searchBar.value = "";
          applyFilters();
        });

        window.addEventListener("scroll", () => {
          scrollButton.classList.toggle("hidden", window.scrollY < 200);
        });

        scrollButton.addEventListener("click", () => {
          window.scrollTo({ top: 0, behavior: "smooth" });
        });

        shareUrlButton.addEventListener("click", (e) => {
          e.stopPropagation();
          const url = shareUrlText.textContent;
          if (!url) return;

          navigator.clipboard
            .writeText(url)
            .then(() => {
              const tooltip = document.getElementById("tooltip");
              if (tooltip) {
                tooltip.classList.add("show");
                setTimeout(() => tooltip.classList.remove("show"), 1500);
              }
            })
            .catch((err) => {
              console.error("Failed to copy URL:", err);
            });
        });

        loadFromUrl();
      });
    </script>

    <style>
      .url-container {
        display: flex;
        align-items: center;
        gap: 0.5rem; /* Add space between share and clear buttons */
        flex-wrap: wrap; /* Allow wrapping on small screens */
      }

      #clear-all-button {
        padding: 0.5rem 1rem;
        font-size: 1rem;
        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
        border-radius: 5px;
        cursor: pointer;
        transition:
          background-color 0.2s,
          color 0.2s,
          border-color 0.2s;
        box-sizing: border-box;
        height: 100%;
        white-space: nowrap;
      }

      #clear-all-button:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
      }

      .search-bar-wrapper {
        position: relative;
        display: inline-block;
      }

      #search-bar {
        padding-right: 2rem;
      }

      .clear-search {
        position: absolute;
        right: 8px;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        font-size: 1.25rem;
        color: #aaa;
        user-select: none;
      }

      .clear-search:hover {
        color: #fff;
      }

      .clear-search.hidden {
        display: none;
      }

      .filter-tabs {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin: 1rem 0;
      }

      .filter-tab {
        padding: 0.5rem 1rem;
        background-color: #222;
        color: white;
        border: 1px solid #444;
        border-radius: 5px;
        cursor: pointer;
      }

      .filter-tab.active {
        background-color: #28a745;
        border-color: #28a745;
      }
    </style>
  </body>
</html>
